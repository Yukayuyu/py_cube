;; -*- mode: org; eval: (company-mode -1); -*-
//Spring 

* Chapter 1,
  
** Basic Bean Scopes
   *Singleton, Prototype, Request, Session, Global Session*
   //by default, all bean are singleton. Beans instantiate when context initialized.
   //Can be prototype, means New bean created with every request or reference
   Application ContextAware
   
** interface ApplicationContextAware 
   //e.g. in situatation where parent be a singleton, but child be prototype, if new instantce of child is needed, one way is though applicationContext get bean.
   //to get ApplicationContext, the parent bean may need to implement the ApplicationContextAware interface.
   
** interface BeanNameAware 
   //the aware interfaces
   
** Manage Bean lifecycle
   AbstractApplicationContext
   
** @Bean
   @Bean
   public class beanClass{
       return new Obj();
   }
   //@Bean replace the property value column

   
   
** context.getBean
   context.getBean(className.class)                       | after 3.0
   context.getBean("beanName", className.class)           | after 3.0
   (className) context.getBean("beanName") 
   //the point is, how many beans of the type already exist in the DI container
   
** methods to define bean
   1. @Configuration annotation at container class, within class use @Bean | >3.0
   2. xml <bean id="id" class="fqcn"> <property name="x" value="y"/></bean>
   3. Marker annotation: e.g. @Component -> ComponentScan | >2.5

      
   //Bean == data == configuration
   //@Configuration usage:
   @Configuration
   public class AppConfig{
       @Bean
       UserRepository userRepository(){
           @Bean(name = "userRepo")
           return new UserRepositoryImpl();
       }
   }
   
** ComponentScan
   @ComponentScan("com.example.demo") //scan all compoments under the destination package
   //if the value is omitted, scan all classes within the same package
   
   <context:component-scan base-package="com.example.demo"> //use XML
   
   //take UserService -> userService as the default name 
   
** Types of injection
   1. Setter injection
   2. Constructor injection
   3. Field injection



