;; -*- mode: org; eval: (company-mode -1); -*-
//Spring 

* Chapter 1,
  
** Basic Bean Scopes
   *Singleton, Prototype, Request, Session, Global Session*
   //by default, all bean are singleton. Beans instantiate when context initialized.
   //Can be prototype, means New bean created with every request or reference
   Application ContextAware
   
** interface ApplicationContextAware 
   //e.g. in situatation where parent be a singleton, but child be prototype, if new instantce of child is needed, one way is though applicationContext get bean.
   //to get ApplicationContext, the parent bean may need to implement the ApplicationContextAware interface.
   
** interface BeanNameAware 
   //the aware interfaces
   
** Manage Bean lifecycle
   AbstractApplicationContext
   
** @Bean
   @Bean
   public class beanClass{
       return new Obj();
   }
   //@Bean replace the property value column

   
   
** context.getBean
   context.getBean(className.class)                       | after 3.0
   context.getBean("beanName", className.class)           | after 3.0
   (className) context.getBean("beanName") 
   //the point is, how many beans of the type already exist in the DI container
   
** methods to define bean
   1. @Configuration annotation at container class, within class use @Bean | >3.0
   2. xml <bean id="id" class="fqcn"> <property name="x" value="y"/></bean>
   3. Marker annotation: e.g. @Component -> ComponentScan | >2.5

      
   //Bean == data == configuration
   //@Configuration usage:
   @Configuration
   public class AppConfig{
       @Bean
       UserRepository userRepository(){
           @Bean(name = "userRepo")
           return new UserRepositoryImpl();
       }
   }
   
** ComponentScan
   @ComponentScan("com.example.demo") //scan all compoments under the destination package
   //if the value is omitted, scan all classes within the same package
   
   <context:component-scan base-package="com.example.demo"> //use XML
   
   //take UserService -> userService as the default name 
   
** Types of injection
   1. Setter injection
   2. Constructor injection
   3. Field injection
      
   *When to use which*
   //Use properties for every optiona dependency.
   //Use constructor args for every mandatory dependency.




** AOP keywords
   + Aspect
   + Join Point
   + Advice
     //additional behavior to existing code, without modifying the code itself
   + Pointcut
   + Weaving
   + Target

     
* Chater 2, Spring MVC
  Dispatcher Servlet -> {Handler Mapping || Handler Adapter || View Resolver}
  //some Spring components:
      + Handler Adapter
      + Handler Mapping
      + ViewResolver
      + View
      + DataBinder
      + HandlerInterceptor
      + HttpMessageConverter
        
   //load necessary components into the DI container before MVC initialize.
   //Note do not mix containers from apps.
   //containers from web server , Spring, Spring MVC, an other framework.
   
** the DispatcherServlet
   
** default index.html location:
   src/main/resources/staticindex.html
   
* Chapter 3, Spring-boot-reference documentation
** Cp2, Getting Started
*** @RestController 
    //stereotype annotation. It provides hints for people reading the code and for Spring that the class plays a specific role. 
    //@Controller is used to mark classes as Spring MVC Controller.
    // @RestController is a convenience annotation that does nothing more than adding the @Controller and @ResponseBody annotations (see: Javadoc)
*** @RequestMapping("/")
    //provides “routing” information. It tells Spring that any HTTP
request with the / path should be mapped to the home method. 
*** @EnableAutoConfiguration
    // This annotation tells Spring Boot to
“guess” how you want to configure Spring, based on the *jar dependencies* that you have added. Since spring-boot-starter-web added Tomcat and Spring MVC, the auto-configuration assumes that you are developing a web application and sets up Spring accordingly.


   
   
